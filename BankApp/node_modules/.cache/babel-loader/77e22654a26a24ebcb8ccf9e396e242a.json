{"ast":null,"code":"var express = require('express'); //this is apparently needed for me to examine reuqest bodies\n\n\nvar mysql = require('mysql');\n\nvar pool = mysql.createPool({\n  connectionLimit: 30,\n  host: 'localhost',\n  user: 'root',\n  password: 'rootroot',\n  database: 'banking',\n  debug: false\n}); //edit this based on host\n\nvar next = require('next');\n\nvar dev = process.env.NODE_ENV !== 'production';\nvar app = next({\n  dev: dev\n});\nvar handle = app.getRequestHandler();\n\nvar session = require('express-session');\n\nvar passport = require('passport'),\n    LocalStrategy = require('passport-local').Strategy;\n\nvar flash = require('connect-flash');\n\nvar api_key = \"secret\";\npassport.serializeUser(function (user, done) {\n  // console.log(\"serializeUser\")\n  // console.log(user)\n  done(null, user);\n});\npassport.deserializeUser(function (user, done) {\n  //TODO: multiple calls are happenning\n  // console.log(\"deserializeUser\")\n  //console.log(user)\n  pool.query(\"select User_id,First_name,(select Account_id from bank_table) as bank_id from Users where User_id = '\".concat(user.User_id, \"'\"), function (err, rows) {\n    // console.log(rows[0])\n    done(err, rows[0]); //should be only one result at most\n  });\n});\npassport.use(new LocalStrategy({\n  usernameField: 'email',\n  passwordField: 'password'\n}, function (email, password, done) {\n  //console.log(email,password);\n  pool.query(\"select User_id,First_name from Users where email = '\".concat(email, \"' and User_password = '\").concat(password, \"'\"), function (err, rows) {\n    //console.log(rows);\n    if (err) {\n      return done(err);\n    } else if (rows.length == 0) {\n      return done(null, false, {\n        message: rows\n      });\n    } else {\n      return done(null, rows[0]);\n    }\n  });\n}));\n\nfunction getFromDatabase(req, res, query) {\n  pool.query(query, function (err, rows) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(rows);\n    }\n  });\n}\n\nfunction insertToDatabase(req, res, insertStatement) {\n  pool.query(insertStatement, function (err, response) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(response);\n    }\n  });\n}\n\nfunction isLoggedIn(req, res, nextMid) {\n  console.log(\"isLoggedIn\");\n  console.log(req.session);\n\n  if (req.session.passport !== undefined) {\n    nextMid();\n  } else {\n    res.redirect(\"/\");\n  }\n}\n\nfunction retrieve_user(req, res) {\n  pool.query(\"select * from Users where email = '\".concat(req.params.email, \"'and    User_password = '\").concat(req.params.password, \"'\"), function (err, rows) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(rows[0]);\n    }\n  });\n}\n\nfunction retrieve_Accounts(req, res) {\n  pool.query(\"select * from Accounts where User_id = '\".concat(req.params.User_id, \"'\"), function (err, rows) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(rows);\n    }\n  });\n}\n\nfunction retrieve_Transactions(req, res) {\n  pool.query(\"select * from Transactions     where sender_account_id ='\".concat(req.params.Account_id, \"' or receiver_account_id ='\").concat(req.params.Account_id, \"'    order by date_time desc limit 0, \").concat(req.params.rowAmount), function (err, rows) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(rows);\n    }\n  });\n}\n\nfunction retrieve_All_Transactions(req, res) {\n  var query = \"select * from Transactions   where '\".concat(req.params.User_id, \"' = (select User_id from Accounts where Account_id = Transactions.sender_account_id)    or '\").concat(req.params.User_id, \"' = (select User_id from Accounts where Account_id = Transactions.receiver_account_id)    order by date_time desc limit 0,\").concat(req.params.rowAmount);\n  pool.query(query, function (err, rows) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(rows);\n    }\n  });\n}\n\nfunction retrieve_Bills(req, res) {\n  pool.query(\"select * from Bills where Account_id = '\".concat(req.params.Account_id, \"'\"), function (err, rows) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(rows[0]);\n    }\n  });\n}\n\nfunction retrieve_misses(req, res) {\n  var query = \"select current_miss_amount from Bills where Account_id =   (select Account_id from Accounts where User_id = '\".concat(req.params.User_id, \"' and Type_name = 'checking')\");\n  pool.query(query, function (err, rows) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(rows[0]);\n    }\n  });\n}\n\nfunction retrieve_Payments(req, res) {\n  pool.query(\"select * from Transactions where Transaction_id in     (select Transaction_id from payment_for_bill where Bill_id = '\".concat(req.params.Bill_id, \"' )\"), function (err, rows) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(rows);\n    }\n  });\n}\n\nfunction insert_user(req, res) {\n  var insertStatement = \"Insert into Users    (First_name, Last_name, SSN, Address, Phone_num, User_password,Pin_num,email)    values('\".concat(req.body.First_name, \"','\").concat(req.body.Last_name, \"','\").concat(req.body.SSN, \"',     '\").concat(req.body.Address, \"','\").concat(req.body.Phone_num, \"','\").concat(req.body.User_password, \"',     '\").concat(req.body.Pin_num, \"','\").concat(req.body.email, \"')\"); //console.log(formattedStatement);\n\n  pool.query(insertStatement, function (err, response) {\n    // for some reason 'function' is not used?\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(response);\n    }\n  });\n}\n\nfunction insert_account(req, res) {\n  var insertStatement = \"insert into Accounts(Type_name,Balance,User_id,Card_num)    values('\".concat(req.body.Type_name, \"',\").concat(req.body.Balance, \",'\").concat(req.body.User_id, \"','\").concat(req.body.Card_num, \"')\");\n  pool.query(insertStatement, function (err, response) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(response);\n    }\n  });\n}\n\nfunction set_main_account(req, res) {\n  pool.query(\"update Users set main_account_id = '\".concat(req.body.main_account_id, \"'    where User_id = '\").concat(req.params.User_id, \"'\"), function (err, response) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(response);\n    }\n  });\n}\n\nfunction general_transfer(req, res) {\n  //testing between accounts : working, deposit:working ,bill payment:working\n  pool.query(\"insert into Transactions(amount,sender_account_id,receiver_account_id)     values(\".concat(req.body.amount, \",'\").concat(req.body.sender_account_id, \"','\").concat(req.body.receiver_account_id, \"')\"), function (err, response) {\n    if (err) {\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(response);\n    }\n  }); //IMPORTANT: If the error returned is  like ER_NO_REFERENCED_ROW_2, then one of the account ids could not be found\n}\n\nfunction cross_transfer(req, res) {\n  var insertStatement = \"insert into Transactions(amount,sender_account_id,receiver_account_id)     values(\".concat(req.body.amount, \",'\").concat(req.body.sender_account_id, \"',    (select main_account_id from Users where email = '\").concat(req.params.email, \"'))\");\n  pool.query(insertStatement, function (err, response) {\n    if (err) {\n      //one possible error is that the receiver has no main account set. So no account with id=null will be found\n      //Error for that will read  ER_BAD_NULL_ERROR\n      res.json({\n        'error': true,\n        'message': 'Error occured' + err\n      });\n    } else {\n      res.json(response);\n    }\n  });\n}\n\napp.prepare().then(function () {\n  var server = express();\n  server.use(function (req, res, next) {\n    if (req.url != '/favicon.ico') {\n      return next();\n    } else {\n      res.status(200);\n      res.header('Content-Type', 'image/x-icon');\n      res.header('Cache-Control', 'max-age=4294880896');\n      res.end();\n    }\n  });\n  server.use(express.json()); // app.use(express.cookieParser());\n  // app.use(express.bodyParser());\n\n  server.use(session({\n    secret: 'keyboard cat',\n    resave: false,\n    saveUninitialized: true,\n    cookie: {\n      secure: false\n    }\n  }));\n  server.use(require('cookie-parser')());\n  server.use(require('body-parser').urlencoded({\n    extended: true\n  }));\n  server.use(passport.initialize());\n  server.use(passport.session()); // server.get('/p/:id', (req, res) => {\n  //    const actualPage = '/post'\n  //    const queryParams = { title: req.params.id }\n  //    app.render(req, res, actualPage, queryParams)\n  //  })\n\n  server.get('/User/:email/:password/:api_key', function (req, res) {\n    //handles retriving user info, for log-in\n    if (req.params.api_key == api_key) {\n      retrieve_user(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.get('/Accounts/:User_id/:api_key', function (req, res) {\n    //handles retrieving all account info for a user\n    if (req.params.api_key == api_key) {\n      retrieve_Accounts(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.get('/Transactions/:Account_id/:rowAmount/:api_key', function (req, res) {\n    //retrieves all transaction involving the account\n    if (req.params.api_key == api_key) {\n      retrieve_Transactions(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.get('/Transactions/All/:User_id/:rowAmount/:api_key', function (req, res) {\n    if (req.params.api_key == api_key) {\n      retrieve_All_Transactions(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.get('/Bills/:Account_id/:api_key', function (req, res) {\n    //retrieves any bill(1 possible) for the account\n    if (req.params.api_key == api_key) {\n      retrieve_Bills(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.get('/BillPayments/:Bill_id/:api_key', function (req, res) {\n    // retrieves transactions that were bill payments\n    if (req.params.api_key == api_key) {\n      retrieve_Payments(req, res);\n      ;\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.get('/Bills/misses/:User_id/:api_key', function (req, res) {\n    if (req.params.api_key == api_key) {\n      retrieve_misses(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.put('/User/:api_key', function (req, res) {\n    //create new user account\n    if (req.params.api_key == api_key) {\n      insert_user(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.post('/User/:User_id/:api_key', function (req, res) {\n    //update a user's choice of main account\n    if (req.params.api_key == api_key) {\n      set_main_account(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.put('/Accounts/:api_key', function (req, res) {\n    //make a new banking account for the user\n    if (req.params.api_key == api_key) {\n      insert_account(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.put('/Transactions/:api_key', function (req, res) {\n    //transfers between single user's accounts, deposits, and bill payments\n    if (req.params.api_key == api_key) {\n      general_transfer(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.put('/Transactions/:email/:api_key', function (req, res) {\n    //cross user transfers\n    if (req.params.api_key == api_key) {\n      cross_transfer(req, res);\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  });\n  server.get('/dashboard', isLoggedIn, function (req, res) {\n    return handle(req, res);\n  });\n  /*\n  server.post('/register/~~~',(req,res)=>{\n   });\n   */\n\n  server.post('/testRoute', function (req, res) {\n    console.log(\"test\");\n    console.log(req);\n    console.log(res);\n    res.json({\n      \"message\": \"you're doing it wrong\"\n    });\n  });\n  server.get('/signout', function (req, res) {\n    req.logout();\n    req.session.passport = undefined;\n    console.log(req.session);\n    res.redirect('/');\n  });\n  server.post('/login/:api_key', function (req, res, nextMid) {\n    if (req.params.api_key == api_key) {\n      //console.log(req.body)\n      if (req.body.isSignUp == \"true\") {\n        registerUser(req, function (req) {\n          registerAccount(req, function () {\n            console.log('User and account have been inserted!');\n            nextMid();\n          });\n        });\n      } else {\n        //console.log(\"we did it\")\n        nextMid();\n      }\n    } else {\n      res.json({\n        \"error\": \"bad api key\"\n      });\n    }\n  }, passport.authenticate('local', {\n    successRedirect: '/dashboard',\n    failureRedirect: '/'\n  }));\n\n  function registerUser(req, completion) {\n    var insertStatement = \"Insert into Users      (First_name, Last_name, SSN, Address, Phone_num, User_password,Pin_num,email)      values('\".concat(req.body.firstName, \"','\").concat(req.body.lastName, \"','\").concat(req.body.ssn, \"',       '\").concat(req.body.address, \"','\").concat(req.body.phone, \"','\").concat(req.body.password, \"',       '','\").concat(req.body.email, \"')\");\n    pool.query(insertStatement, function (err, response) {\n      if (err) {\n        //()\n        console.log(err);\n      } else {\n        completion(req);\n      } // if(err){\n      //   console.log(err);\n      //   return false;\n      // }\n      // else{\n      //   return true;\n      // }\n\n    });\n  }\n\n  function registerAccount(req, completion) {\n    var insertStatement = \"insert into Accounts(Type_name,Balance,User_id,Card_num)      values('\".concat(req.body.accountType, \"',500,(select User_id from Users where email = '\").concat(req.body.email, \"'),'')\");\n    pool.query(insertStatement, function (err, response) {\n      if (err) {\n        // remove created User\n        pool.query(\"delete from Users where email = '\".concat(req.body.email, \"'\"));\n        console.log(err);\n        return false;\n      } else {\n        completion();\n      }\n    });\n  }\n\n  server.get('*', function (req, res) {\n    return handle(req, res);\n  }); // // // //\n  //TODO: Debug paying a Bill. Also should bills be creatable by request???\n\n  server.listen(3000, function (err) {\n    if (err) throw err;\n    console.log('> Ready on http://localhost:3000');\n  });\n}).catch(function (ex) {\n  console.error(ex.stack);\n  process.exit(1);\n});","map":{"version":3,"sources":["/Users/michaelfultonjr./Documents/BankApp/ssr-server.js"],"names":["express","require","mysql","pool","createPool","connectionLimit","host","user","password","database","debug","next","dev","process","env","NODE_ENV","app","handle","getRequestHandler","session","passport","LocalStrategy","Strategy","flash","api_key","serializeUser","done","deserializeUser","query","User_id","err","rows","use","usernameField","passwordField","email","length","message","getFromDatabase","req","res","json","insertToDatabase","insertStatement","response","isLoggedIn","nextMid","console","log","undefined","redirect","retrieve_user","params","retrieve_Accounts","retrieve_Transactions","Account_id","rowAmount","retrieve_All_Transactions","retrieve_Bills","retrieve_misses","retrieve_Payments","Bill_id","insert_user","body","First_name","Last_name","SSN","Address","Phone_num","User_password","Pin_num","insert_account","Type_name","Balance","Card_num","set_main_account","main_account_id","general_transfer","amount","sender_account_id","receiver_account_id","cross_transfer","prepare","then","server","url","status","header","end","secret","resave","saveUninitialized","cookie","secure","urlencoded","extended","initialize","get","put","post","logout","isSignUp","registerUser","registerAccount","authenticate","successRedirect","failureRedirect","completion","firstName","lastName","ssn","address","phone","accountType","listen","catch","ex","error","stack","exit"],"mappings":"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","sourcesContent":["const express = require ('express');\n\n//this is apparently needed for me to examine reuqest bodies\nconst mysql = require('mysql');\nconst pool = mysql.createPool({\n  connectionLimit:30,\n  host:'localhost',\n  user:'root',\n  password:'rootroot',\n  database:'banking',\n  debug:false\n}); //edit this based on host\nconst next = require('next')\n\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\nvar session = require('express-session')\nvar passport = require('passport')\n  , LocalStrategy = require('passport-local').Strategy;\nvar flash = require('connect-flash');\nconst api_key = \"secret\"\n\n\npassport.serializeUser(function(user,done){\n  // console.log(\"serializeUser\")\n  // console.log(user)\n  done(null,user);\n});\n\npassport.deserializeUser(function(user,done){ //TODO: multiple calls are happenning\n  // console.log(\"deserializeUser\")\n  //console.log(user)\n  pool.query(`select User_id,First_name,(select Account_id from bank_table) as bank_id from Users where User_id = '${user.User_id}'`,function(err,rows){\n      // console.log(rows[0])\n    done(err,rows[0]); //should be only one result at most\n  });\n});\n\npassport.use(\n     new LocalStrategy({\n       usernameField: 'email',\n       passwordField: 'password'\n     },\n     function(email,password,done){\n       //console.log(email,password);\n         pool.query(`select User_id,First_name from Users where email = '${email}' and User_password = '${password}'`,function(err,rows){\n          //console.log(rows);\n           if(err){\n             return done(err);\n           }\n           else if (rows.length == 0) {\n             return done(null,false, { message: rows });\n           }\n           else{\n             return done(null,rows[0]);\n           }\n         });\n     })\n   );\nfunction getFromDatabase(req,res,query){\n  pool.query(query,function(err,rows){\n    if(err){\n      res.json({'error':true,'message':'Error occured'+err});\n    }\n    else{\n      res.json(rows);\n    }\n  });\n}\n\nfunction insertToDatabase(req,res,insertStatement){\n  pool.query(insertStatement,(err,response)=>{\n    if(err){\n      res.json({'error':true,'message':'Error occured'+err});\n    }\n    else{\n      res.json(response);\n    }\n  });\n}\n\nfunction isLoggedIn(req,res, nextMid){\n  console.log(\"isLoggedIn\")\n  console.log(req.session)\n  if(req.session.passport !== undefined){\n    nextMid();\n  }\n  else{\n    res.redirect(\"/\");\n  }\n}\n\nfunction retrieve_user(req,res){\n  pool.query(`select * from Users where email = '${req.params.email}'and \\\n   User_password = '${req.params.password}'`,function(err,rows){\n    if(err){\n      res.json({'error':true,'message':'Error occured'+err});\n    }\n    else{\n      res.json(rows[0]);\n    }\n  });\n}\n\nfunction retrieve_Accounts(req,res){\n  pool.query(`select * from Accounts where User_id = '${req.params.User_id}'`,function(err,rows){\n    if(err){\n      res.json({'error':true,'message':'Error occured'+err})\n    }\n    else{\n      res.json(rows);\n    }\n  });\n}\n\nfunction retrieve_Transactions(req,res){\n  pool.query(`select * from Transactions \\\n    where sender_account_id ='${req.params.Account_id}' or receiver_account_id ='${req.params.Account_id}'\\\n    order by date_time desc limit 0, ${req.params.rowAmount}`, function(err,rows){\n      if(err){\n        res.json({'error':true,'message':'Error occured'+err});\n      }\n      else{\n        res.json(rows);\n      }\n    });\n}\n\nfunction retrieve_All_Transactions(req,res){\n  let query =`select * from Transactions\\\n   where '${req.params.User_id}' = (select User_id from Accounts where Account_id = Transactions.sender_account_id)\\\n    or '${req.params.User_id}' = (select User_id from Accounts where Account_id = Transactions.receiver_account_id)\\\n    order by date_time desc limit 0,${req.params.rowAmount}`;\n\n  pool.query(query,function(err,rows){\n    if(err){\n      res.json({'error':true,'message':'Error occured'+err});\n    }\n    else{\n      res.json(rows);\n    }\n  });\n}\n\nfunction retrieve_Bills(req,res){\n  pool.query(`select * from Bills where Account_id = '${req.params.Account_id}'`,function(err,rows){\n    if(err){\n      res.json({'error':true,'message':'Error occured'+err});\n    }\n    else{\n      res.json(rows[0]);\n    }\n  });\n}\n\nfunction retrieve_misses(req,res){\n  let query = `select current_miss_amount from Bills where Account_id = \\\n  (select Account_id from Accounts where User_id = '${req.params.User_id}' and Type_name = 'checking')`;\n\n  pool.query(query,function(err,rows){\n    if(err){\n      res.json({'error':true,'message':'Error occured'+err});\n    }\n    else{\n      res.json(rows[0]);\n    }\n  })\n}\n\nfunction retrieve_Payments(req,res){\n  pool.query(`select * from Transactions where Transaction_id in \\\n    (select Transaction_id from payment_for_bill where Bill_id = '${req.params.Bill_id}' )`,function(err,rows){\n      if(err){\n        res.json({'error':true,'message':'Error occured'+err});\n      }\n      else{\n        res.json(rows);\n      }\n    });\n}\n\nfunction insert_user(req,res){\n  let insertStatement = `Insert into Users \\\n   (First_name, Last_name, SSN, Address, Phone_num, User_password,Pin_num,email) \\\n   values('${req.body.First_name}','${req.body.Last_name}','${req.body.SSN}',\\\n     '${req.body.Address}','${req.body.Phone_num}','${req.body.User_password}',\\\n     '${req.body.Pin_num}','${req.body.email}')`;\n\n  //console.log(formattedStatement);\n  pool.query(insertStatement,(err,response) =>{ // for some reason 'function' is not used?\n    if(err){\n      res.json({'error':true,'message':'Error occured'+err});\n    }\n    else{\n      res.json(response);\n    }\n  });\n}\n\nfunction insert_account(req,res){\n  let insertStatement = `insert into Accounts(Type_name,Balance,User_id,Card_num)\\\n    values('${req.body.Type_name}',${req.body.Balance},'${req.body.User_id}','${req.body.Card_num}')`\n  pool.query(insertStatement,(err,response)=>{\n    if(err){\n      res.json({'error':true,'message':'Error occured'+err});\n    }\n    else{\n      res.json(response);\n    }\n  });\n}\n\nfunction set_main_account(req,res){\n\n  pool.query(`update Users set main_account_id = '${req.body.main_account_id}'\\\n    where User_id = '${req.params.User_id}'`,(err,response)=>{\n      if(err){\n        res.json({'error':true,'message':'Error occured'+err});\n      }\n      else{\n        res.json(response);\n      }\n    });\n}\n\nfunction general_transfer(req,res){ //testing between accounts : working, deposit:working ,bill payment:working\n  pool.query(`insert into Transactions(amount,sender_account_id,receiver_account_id) \\\n    values(${req.body.amount},'${req.body.sender_account_id}','${req.body.receiver_account_id}')`,(err,response)=>{\n      if(err){\n        res.json({'error':true,'message':'Error occured'+err});\n      }\n      else{\n        res.json(response);\n      }\n  }); //IMPORTANT: If the error returned is  like ER_NO_REFERENCED_ROW_2, then one of the account ids could not be found\n}\n\nfunction cross_transfer(req,res){\n  let insertStatement = `insert into Transactions(amount,sender_account_id,receiver_account_id) \\\n    values(${req.body.amount},'${req.body.sender_account_id}',\\\n    (select main_account_id from Users where email = '${req.params.email}'))`;\n  pool.query(insertStatement,(err,response)=>{\n    if(err){ //one possible error is that the receiver has no main account set. So no account with id=null will be found\n             //Error for that will read  ER_BAD_NULL_ERROR\n      res.json({'error':true,'message':'Error occured'+err});\n    }\n    else{\n      res.json(response);\n    }\n  });\n}\n\n\napp.prepare()\n.then(() => {\n  const server = express()\n  server.use(function(req, res, next) {\n    if (req.url != '/favicon.ico') {\n      return next();\n    } else {\n      res.status(200);\n      res.header('Content-Type', 'image/x-icon');\n      res.header('Cache-Control', 'max-age=4294880896');\n      res.end();\n    }\n  });\n  server.use(express.json());\n\n  // app.use(express.cookieParser());\n// app.use(express.bodyParser());\n  server.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}))\nserver.use(require('cookie-parser')());\nserver.use(require('body-parser').urlencoded({ extended: true }));\n  server.use(passport.initialize())\n  server.use(passport.session())\n\n\n\n      // server.get('/p/:id', (req, res) => {\n      //    const actualPage = '/post'\n      //    const queryParams = { title: req.params.id }\n      //    app.render(req, res, actualPage, queryParams)\n      //  })\n\n\n  server.get('/User/:email/:password/:api_key', (req,res) =>{ //handles retriving user info, for log-in\n    if(req.params.api_key == api_key){\n      retrieve_user(req,res);\n    }\n    else{\n      res.json({\"error\":\"bad api key\"});\n    }\n  });\n\n  server.get('/Accounts/:User_id/:api_key',(req,res)=>{ //handles retrieving all account info for a user\n    if(req.params.api_key == api_key){\n      retrieve_Accounts(req,res);\n    }\n    else{\n      res.json({\"error\":\"bad api key\"});\n    }\n  });\n\n  server.get('/Transactions/:Account_id/:rowAmount/:api_key',(req,res)=>{ //retrieves all transaction involving the account\n    if(req.params.api_key == api_key){\n      retrieve_Transactions(req,res);\n    }\n    else{\n      res.json({\"error\":\"bad api key\"});\n    }\n\n  });\n\n  server.get('/Transactions/All/:User_id/:rowAmount/:api_key',(req,res)=>{\n    if(req.params.api_key == api_key){\n      retrieve_All_Transactions(req,res);\n    }\n    else{\n      res.json({\"error\":\"bad api key\"});\n    }\n  });\n\n  server.get('/Bills/:Account_id/:api_key',(req,res)=>{ //retrieves any bill(1 possible) for the account\n    if(req.params.api_key == api_key){\n      retrieve_Bills(req,res);\n    }\n    else{\n      res.json({\"error\":\"bad api key\"});\n    }\n  });\n\n  server.get('/BillPayments/:Bill_id/:api_key',(req,res)=>{// retrieves transactions that were bill payments\n    if(req.params.api_key == api_key){\n      retrieve_Payments(req,res);;\n    }\n    else{\n      res.json({\"error\":\"bad api key\"});\n    }\n  });\n\n  server.get('/Bills/misses/:User_id/:api_key',(req,res)=>{\n\n    if (req.params.api_key == api_key){\n      retrieve_misses(req,res);\n    } else{\n      res.json({\"error\":\"bad api key\"});\n    }\n  });\n\n  server.put('/User/:api_key',(req,res)=>{ //create new user account\n    if (req.params.api_key == api_key){\n      insert_user(req,res);\n    } else{\n      res.json({\"error\":\"bad api key\"});\n    }\n\n  });\n\n  server.post('/User/:User_id/:api_key',(req,res)=>{ //update a user's choice of main account\n\n    if (req.params.api_key == api_key){\n        set_main_account(req,res);\n    } else{\n      res.json({\"error\":\"bad api key\"});\n    }\n  });\n\n  server.put('/Accounts/:api_key',(req,res)=>{ //make a new banking account for the user\n    if (req.params.api_key == api_key){\n        insert_account(req,res);\n    } else{\n      res.json({\"error\":\"bad api key\"});\n    }\n  });\n\n  server.put('/Transactions/:api_key',(req,res)=>{ //transfers between single user's accounts, deposits, and bill payments\n\n    if (req.params.api_key == api_key){\n      general_transfer(req,res);\n    } else{\n      res.json({\"error\":\"bad api key\"});\n    }\n\n  });\n\n  server.put('/Transactions/:email/:api_key',(req,res)=>{ //cross user transfers\n    if (req.params.api_key == api_key){\n      cross_transfer(req,res);\n    } else{\n      res.json({\"error\":\"bad api key\"});\n    }\n\n  });\n\n\n  server.get('/dashboard', isLoggedIn, (req, res) => {\n\n    return handle(req, res)\n  })\n\n\n  /*\n  server.post('/register/~~~',(req,res)=>{\n\n  });\n\n  */\n\n  server.post('/testRoute', (req, res) => {\n    console.log(\"test\")\n    console.log(req)\n    console.log(res)\n      res.json({\"message\" : \"you're doing it wrong\"})\n  })\n  server.get('/signout',function(req,res){\n    req.logout();\n    req.session.passport = undefined;\n    console.log(req.session)\n    res.redirect('/');\n  });\n\n  server.post('/login/:api_key', (req, res, nextMid) => {\n    if (req.params.api_key == api_key){\n      //console.log(req.body)\n      if(req.body.isSignUp == \"true\"){\n        registerUser(req, (req) => {\n          registerAccount(req, () => {\n            console.log('User and account have been inserted!');\n            nextMid()\n          });\n\n        });\n      } else {\n        //console.log(\"we did it\")\n        nextMid()\n      }\n    } else{\n      res.json({\"error\":\"bad api key\"});\n    }\n\n\n  }, passport.authenticate('local', { successRedirect: '/dashboard',failureRedirect:'/'}));\n\n  function registerUser(req, completion){\n    let insertStatement = `Insert into Users \\\n     (First_name, Last_name, SSN, Address, Phone_num, User_password,Pin_num,email) \\\n     values('${req.body.firstName}','${req.body.lastName}','${req.body.ssn}',\\\n       '${req.body.address}','${req.body.phone}','${req.body.password}',\\\n       '','${req.body.email}')`;\n\n    pool.query(insertStatement,function(err,response){\n\n      if(err){\n        //()\n        console.log(err)\n      }\n      else{\n        completion(req)\n      }\n      // if(err){\n      //   console.log(err);\n      //   return false;\n      // }\n      // else{\n      //   return true;\n      // }\n    });\n  }\n  function registerAccount(req, completion){\n    let insertStatement = `insert into Accounts(Type_name,Balance,User_id,Card_num)\\\n      values('${req.body.accountType}',500,(select User_id from Users where email = '${req.body.email}'),'')`;\n\n    pool.query(insertStatement,function(err,response){\n      if(err){\n        // remove created User\n        pool.query(`delete from Users where email = '${req.body.email}'`);\n        console.log(err);\n        return false;\n      }\n      else{\n        completion()\n      }\n    })\n\n  }\n\n  server.get('*', (req, res) => {\n    return handle(req, res)\n  })\n// // // //\n\n  //TODO: Debug paying a Bill. Also should bills be creatable by request???\n  server.listen(3000, (err) => {\n    if (err) throw err\n    console.log('> Ready on http://localhost:3000')\n  })\n})\n.catch((ex) => {\n  console.error(ex.stack)\n  process.exit(1)\n})\n"]},"metadata":{},"sourceType":"module"}