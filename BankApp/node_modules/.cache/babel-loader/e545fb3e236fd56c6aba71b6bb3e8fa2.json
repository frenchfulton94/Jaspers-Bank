{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { Modal, Button, Form, InputGroup } from 'react-bootstrap';\n\nvar TransferModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TransferModal, _Component);\n\n  function TransferModal(props) {\n    var _this;\n\n    _classCallCheck(this, TransferModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransferModal).call(this, props));\n    _this.state = {\n      email: \"\",\n      amount: 0,\n      route: \"/TransactionsOther/secret\",\n      choice: \"otherTransfer\",\n      recipient: \"\",\n      show: false,\n      account: \"\",\n      formCheck: true\n    };\n    _this.updateEmail = _this.updateEmail.bind(_assertThisInitialized(_this));\n    _this.updateAmount = _this.updateAmount.bind(_assertThisInitialized(_this));\n    _this.updateRoute = _this.updateRoute.bind(_assertThisInitialized(_this));\n    _this.updateAccount = _this.updateAccount.bind(_assertThisInitialized(_this)); //this.handleClose = this.handleClose.bind(this)\n\n    return _this;\n  }\n\n  _createClass(TransferModal, [{\n    key: \"updateEmail\",\n    value: function updateEmail(event) {\n      var email = event.target.value;\n      this.setState({\n        email: email\n      });\n    }\n  }, {\n    key: \"updateAmount\",\n    value: function updateAmount(event) {\n      var amount = event.target.value;\n      this.setState({\n        amount: amount\n      });\n    }\n  }, {\n    key: \"updateRoute\",\n    value: function updateRoute(event) {\n      var route = event.target.value;\n      var name = event.target.name;\n      this.setState({\n        route: route,\n        choice: name\n      });\n    }\n  }, {\n    key: \"updateAccount\",\n    value: function updateAccount(event) {\n      var account = event.target.value;\n      this.setState({\n        account: account\n      });\n    }\n  }, {\n    key: \"getAccounts\",\n    value: function getAccounts(accounts, account_id) {\n      var accountEnding;\n      var options = accounts.map(function (account) {\n        if (account_id != account.Account_id && account.Type_name != \"credit\") {\n          accountEnding = account.Account_num.substr(account.Account_num.length - 4);\n          return React.createElement(\"option\", {\n            value: account.Account_id\n          }, account.Type_name, \" - ending in #...\", accountEnding);\n        }\n      });\n      return options;\n    }\n  }, {\n    key: \"handleClose\",\n    value: function handleClose() {\n      this.setState({\n        show: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var type = this.props.account.Type_name;\n      return React.createElement(Modal, {\n        show: this.props.parent.state.openTransfers,\n        onHide: this.props.parent.openModal\n      }, React.createElement(Modal.Header, null, React.createElement(Modal.Title, null, \"TRANSFER\")), React.createElement(Modal.Body, null, React.createElement(Form, {\n        id: \"transferForm\",\n        action: this.state.route,\n        method: \"post\"\n      }, React.createElement(Form.Group, null, React.createElement(Form.Label, null, \"From:\"), React.createElement(InputGroup, null, React.createElement(InputGroup.Prepend, null, React.createElement(InputGroup.Text, {\n        id: \"inputGroupPrepend\"\n      }, type)), React.createElement(Form.Control, {\n        type: \"text\",\n        readOnly: true,\n        value: this.props.account.Account_id,\n        name: \"sender_account_id\"\n      }))), React.createElement(Form.Group, null, React.createElement(Form.Label, null, \"SELECT WHERE TO TRANSFER\"), React.createElement(Form.Check, {\n        disabled: !(this.props.accounts.length > 1),\n        onChange: this.updateRoute,\n        checked: this.state.choice == \"selfTransfer\",\n        type: \"radio\",\n        label: \"My Accounts\",\n        name: \"selfTransfer\",\n        value: \"/Transactions/secret\"\n      }), React.createElement(Form.Check, {\n        checked: this.state.choice == \"otherTransfer\" || !(this.props.accounts.length > 1),\n        onChange: this.updateRoute,\n        type: \"radio\",\n        label: \"Another User\",\n        name: \"otherTransfer\",\n        value: \"/TransactionsOther/secret\"\n      })), this.state.choice == \"selfTransfer\" && this.props.accounts.length > 0 ? React.createElement(Form.Group, null, React.createElement(Form.Label, null, \"SELECT AN ACCOUNT\"), React.createElement(Form.Control, {\n        as: \"select\",\n        name: \"receiver_account_id\",\n        value: this.state.account,\n        onChange: this.updateAccount\n      }, this.getAccounts(this.props.accounts, this.props.account.Account_id))) : React.createElement(Form.Group, null, React.createElement(Form.Label, null, \"TO:\"), React.createElement(Form.Control, {\n        type: \"email\",\n        name: \"email\",\n        value: this.state.email,\n        onChange: this.updateEmail\n      })), React.createElement(Form.Group, null, React.createElement(Form.Label, null, \"Amount:\"), React.createElement(InputGroup, null, React.createElement(InputGroup.Prepend, null, React.createElement(InputGroup.Text, {\n        id: \"inputGroupPrepend\"\n      }, \"$\")), React.createElement(Form.Control, {\n        type: \"text\",\n        name: \"amount\",\n        value: this.state.amount,\n        onChange: this.updateAmount\n      }))))), React.createElement(Modal.Footer, null, React.createElement(Button, {\n        variant: \"outline-danger\",\n        onClick: this.props.parent.openModal\n      }, \"CANCEL\"), React.createElement(Button, {\n        variant: \"outline-dark\",\n        form: \"transferForm\",\n        type: \"submit\",\n        value: \"submit\"\n      }, \"SEND\")));\n    }\n  }]);\n\n  return TransferModal;\n}(Component); // '/Transactions/:api_key'  //  << Tranfers between your own accounts. Body args are amount, sender_account_id, receiver_account_id\n// '/Transactions/:email/:api_key' //  <<Transfer to a different user. Body args are amount, sender_account_id, email\n\n\nexport default TransferModal;","map":{"version":3,"sources":["/Users/michaelfultonjr./Documents/BankApp/components/transfermodal.js"],"names":["React","Component","Modal","Button","Form","InputGroup","TransferModal","props","state","email","amount","route","choice","recipient","show","account","formCheck","updateEmail","bind","updateAmount","updateRoute","updateAccount","event","target","value","setState","name","accounts","account_id","accountEnding","options","map","Account_id","Type_name","Account_num","substr","length","type","parent","openTransfers","openModal","getAccounts"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Modal, Button, Form, InputGroup} from 'react-bootstrap'\n\nclass TransferModal extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      email: \"\",\n      amount: 0,\n      route: \"/TransactionsOther/secret\",\n      choice: \"otherTransfer\",\n      recipient: \"\",\n      show: false,\n      account: \"\",\n      formCheck: true\n    }\n\n    this.updateEmail = this.updateEmail.bind(this)\n    this.updateAmount = this.updateAmount.bind(this)\n    this.updateRoute = this.updateRoute.bind(this)\n    this.updateAccount = this.updateAccount.bind(this)\n    //this.handleClose = this.handleClose.bind(this)\n  }\n\n  updateEmail(event){\n    let email = event.target.value\n    this.setState({\n      email: email\n    })\n  }\n\n  updateAmount(event){\n    let amount = event.target.value\n    this.setState({\n      amount: amount\n    })\n  }\n\n  updateRoute(event){\n    let route = event.target.value\n    let name = event.target.name\n    this.setState({\n      route: route,\n      choice: name\n    })\n   }\n    updateAccount(event){\n      let account = event.target.value\n      this.setState({\n        account: account\n      })\n    }\n\n    getAccounts(accounts, account_id){\n      var accountEnding;\n    var options =  accounts.map(function(account){\n    if (account_id != account.Account_id && account.Type_name != \"credit\") {\n      accountEnding = account.Account_num.substr(account.Account_num.length - 4)\n      return <option value={account.Account_id}>{account.Type_name} - ending in #...{accountEnding}</option>\n    }\n  })\n      return options\n    }\n\n    handleClose(){\n      this.setState({\n        show: false\n      })\n    }\n\n\n  render(){\n    const type = this.props.account.Type_name\n    return(\n      <Modal show={this.props.parent.state.openTransfers} onHide={this.props.parent.openModal}>\n        <Modal.Header>\n          <Modal.Title>TRANSFER</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form id=\"transferForm\" action={this.state.route} method=\"post\">\n            <Form.Group>\n              <Form.Label>From:</Form.Label>\n                <InputGroup>\n                <InputGroup.Prepend>\n                <InputGroup.Text id=\"inputGroupPrepend\">{type}</InputGroup.Text>\n                </InputGroup.Prepend>\n              <Form.Control type=\"text\" readOnly value={this.props.account.Account_id} name=\"sender_account_id\" />\n              </InputGroup>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>SELECT WHERE TO TRANSFER</Form.Label>\n              <Form.Check\n                disabled={!(this.props.accounts.length > 1) }\n                onChange={this.updateRoute}\n                checked={this.state.choice == \"selfTransfer\"}\n                type=\"radio\"\n                label=\"My Accounts\"\n                name=\"selfTransfer\"\n                value=\"/Transactions/secret\" />\n              <Form.Check\n                checked={this.state.choice == \"otherTransfer\" || !(this.props.accounts.length > 1)}\n                onChange={this.updateRoute}\n                type=\"radio\"\n                label=\"Another User\"\n                name=\"otherTransfer\"\n                value=\"/TransactionsOther/secret\" />\n            </Form.Group>\n            { this.state.choice == \"selfTransfer\" && this.props.accounts.length > 0  ?\n            (<Form.Group>\n              <Form.Label>SELECT AN ACCOUNT</Form.Label>\n              <Form.Control as=\"select\" name=\"receiver_account_id\" value={this.state.account} onChange={this.updateAccount}>\n                  {this.getAccounts(this.props.accounts, this.props.account.Account_id)}\n              </Form.Control>\n            </Form.Group>) :\n            (<Form.Group>\n              <Form.Label>TO:</Form.Label>\n              <Form.Control type=\"email\" name=\"email\"  value={this.state.email} onChange={this.updateEmail}/>\n            </Form.Group>)}\n            <Form.Group>\n              <Form.Label>Amount:</Form.Label>\n              <InputGroup>\n              <InputGroup.Prepend>\n              <InputGroup.Text id=\"inputGroupPrepend\">$</InputGroup.Text>\n              </InputGroup.Prepend>\n                <Form.Control type=\"text\" name=\"amount\" value={this.state.amount} onChange={this.updateAmount}/>\n              </InputGroup>\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n        <Button variant=\"outline-danger\" onClick={this.props.parent.openModal} >CANCEL</Button>\n      <Button variant=\"outline-dark\"  form=\"transferForm\" type=\"submit\" value=\"submit\" >SEND</Button>\n        </Modal.Footer>\n\n      </Modal>\n    )\n  }\n}\n\n// '/Transactions/:api_key'  //  << Tranfers between your own accounts. Body args are amount, sender_account_id, receiver_account_id\n// '/Transactions/:email/:api_key' //  <<Transfer to a different user. Body args are amount, sender_account_id, email\nexport default TransferModal\n"]},"metadata":{},"sourceType":"module"}