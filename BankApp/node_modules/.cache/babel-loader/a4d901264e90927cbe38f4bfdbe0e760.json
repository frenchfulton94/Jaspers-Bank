{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { Modal, Button, Form, InputGroup } from 'react-bootstrap';\n\nvar TransferModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TransferModal, _Component);\n\n  function TransferModal(props) {\n    var _this;\n\n    _classCallCheck(this, TransferModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransferModal).call(this, props));\n    _this.state = {\n      email: \"\",\n      amount: 0,\n      route: \"/Transactions/secret\",\n      choice: \"selfTransfer\",\n      recipient: \"\",\n      show: false\n    };\n    _this.updateEmail = _this.updateEmail.bind(_assertThisInitialized(_this));\n    _this.updateAmount = _this.updateAmount.bind(_assertThisInitialized(_this));\n    _this.updateRoute = _this.updateRoute.bind(_assertThisInitialized(_this));\n    _this.updateAccount = _this.updateAccount.bind(_assertThisInitialized(_this)); //this.handleClose = this.handleClose.bind(this)\n\n    return _this;\n  }\n\n  _createClass(TransferModal, [{\n    key: \"updateEmail\",\n    value: function updateEmail(event) {\n      var email = event.target.value;\n      this.setState({\n        email: email\n      });\n    }\n  }, {\n    key: \"updateAmount\",\n    value: function updateAmount(event) {\n      var amount = event.target.value;\n      this.setState({\n        amount: amount\n      });\n    }\n  }, {\n    key: \"updateRoute\",\n    value: function updateRoute(event) {\n      var route = event.target.value;\n      var name = this.target.value;\n      this.setState({\n        route: route,\n        choice: name\n      });\n    }\n  }, {\n    key: \"updateAccount\",\n    value: function updateAccount(event) {\n      var account = event.target.value;\n      this.setState({\n        account: account\n      });\n    }\n  }, {\n    key: \"getAccounts\",\n    value: function getAccounts() {\n      console.log(\"get Accounts\");\n      console.log(this.props.accounts);\n\n      if (this.props.account.length > 0) {\n        this.setState({\n          account: this.props.accounts[0].Account_id\n        });\n      }\n\n      return this.props.accounts.map(function (account) {\n        if (this.props.id != id) {\n          return React.createElement(\"option\", {\n            value: account.Account_id\n          }, account.Type_name, \" - \", account.Account_id);\n        }\n      });\n    }\n  }, {\n    key: \"handleClose\",\n    value: function handleClose() {\n      this.setState({\n        show: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Modal, {\n        show: this.props.parent.state.openTransfers,\n        onHide: this.props.parent.openModal\n      }, React.createElement(Modal.Header, null, React.createElement(Modal.Title, null, \"TRANSFER\")), React.createElement(Modal.Body, null, React.createElement(Form, {\n        id: \"transferForm\",\n        action: this.state.route,\n        method: \"post\"\n      }, React.createElement(Form.Group, null, React.createElement(Form.Label, null, \"From:\"), React.createElement(Form.Control, {\n        plaintext: true,\n        readOnly: true,\n        value: 9286,\n        name: \"sender_account_id\"\n      })), React.createElement(Form.Group, null, React.createElement(Form.Label, null, \"SELECT WHERE TO TRANSFER\"), React.createElement(Form.Check, {\n        checked: this.state.choice == \"selfTransfer\",\n        type: \"radio\",\n        label: \"My Accounts\",\n        name: \"selfTransfer\",\n        value: \"/Transactions/secret\"\n      }), React.createElement(Form.Check, {\n        checked: this.state.choice == \"otherTransfer\",\n        type: \"radio\",\n        label: \"Another User\",\n        name: \"otherTransfer\",\n        value: \"/TransactionsOther/secret\"\n      })), this.state.choice == \"selfTransfer\" ? React.createElement(Form.Group, null, React.createElement(Form.Label, null, \"SELECT AN ACCOUNT\"), React.createElement(Form.Control, {\n        as: \"select\",\n        name: \"receiver_account_id\",\n        value: this.state.account,\n        onChange: this.updateAccount\n      }, this.getAccounts())) : React.createElement(Form.Group, null, React.createElement(Form.Label, null, \"TO:\"), React.createElement(Form.Control, {\n        type: \"email\",\n        name: \"email\",\n        value: this.state.email,\n        onChange: this.updateEmail\n      })), React.createElement(Form.Group, null, React.createElement(Form.Label, null, \"Amount:\"), React.createElement(InputGroup, null, React.createElement(InputGroup.Prepend, null, React.createElement(InputGroup.Text, {\n        id: \"inputGroupPrepend\"\n      }, \"$\")), React.createElement(Form.Control, {\n        type: \"text\",\n        name: \"amount\",\n        value: this.state.amount,\n        onChange: this.updateAmount\n      }))))), React.createElement(Modal.Footer, null, React.createElement(Button, {\n        variant: \"outline-danger\",\n        onClick: this.props.parent.openModal\n      }, \"CANCEL\"), React.createElement(Button, {\n        variant: \"outline-dark\",\n        form: \"transerForm\",\n        type: \"submit\",\n        value: \"submit\"\n      }, \"SEND\")));\n    }\n  }]);\n\n  return TransferModal;\n}(Component); // '/Transactions/:api_key'  //  << Tranfers between your own accounts. Body args are amount, sender_account_id, receiver_account_id\n// '/Transactions/:email/:api_key' //  <<Transfer to a different user. Body args are amount, sender_account_id, email\n\n\nexport default TransferModal;","map":{"version":3,"sources":["/Users/michaelfultonjr./Documents/BankApp/components/transfermodal.js"],"names":["React","Component","Modal","Button","Form","InputGroup","TransferModal","props","state","email","amount","route","choice","recipient","show","updateEmail","bind","updateAmount","updateRoute","updateAccount","event","target","value","setState","name","account","console","log","accounts","length","Account_id","map","id","Type_name","parent","openTransfers","openModal","getAccounts"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {Modal, Button, Form, InputGroup} from 'react-bootstrap'\n\nclass TransferModal extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      email: \"\",\n      amount: 0,\n      route: \"/Transactions/secret\",\n      choice: \"selfTransfer\",\n      recipient: \"\",\n      show: false\n    }\n\n    this.updateEmail = this.updateEmail.bind(this)\n    this.updateAmount = this.updateAmount.bind(this)\n    this.updateRoute = this.updateRoute.bind(this)\n    this.updateAccount = this.updateAccount.bind(this)\n    //this.handleClose = this.handleClose.bind(this)\n  }\n\n  updateEmail(event){\n    let email = event.target.value\n    this.setState({\n      email: email\n    })\n  }\n\n  updateAmount(event){\n    let amount = event.target.value\n    this.setState({\n      amount: amount\n    })\n  }\n\n  updateRoute(event){\n    let route = event.target.value\n    let name = this.target.value\n    this.setState({\n      route: route,\n      choice: name\n    })\n   }\n    updateAccount(event){\n      let account = event.target.value\n      this.setState({\n        account: account\n      })\n    }\n\n    getAccounts(){\n      console.log(\"get Accounts\")\n      console.log(this.props.accounts)\n      if (this.props.account.length > 0) {\n      this.setState({\n        account: this.props.accounts[0].Account_id\n      })\n    }\n      return this.props.accounts.map(function(account){\n      if (this.props.id != id) {\n        return <option value={account.Account_id}>{account.Type_name} - {account.Account_id}</option>\n      }\n    })\n    }\n\n    handleClose(){\n      this.setState({\n        show: false\n      })\n    }\n\n\n  render(){\n    return(\n      <Modal show={this.props.parent.state.openTransfers} onHide={this.props.parent.openModal}>\n        <Modal.Header>\n          <Modal.Title>TRANSFER</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form id=\"transferForm\" action={this.state.route} method=\"post\">\n            <Form.Group>\n              <Form.Label>From:</Form.Label>\n              <Form.Control plaintext readOnly value={9286} name=\"sender_account_id\" />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>SELECT WHERE TO TRANSFER</Form.Label>\n              <Form.Check checked={this.state.choice == \"selfTransfer\"} type=\"radio\" label=\"My Accounts\" name=\"selfTransfer\" value=\"/Transactions/secret\" />\n              <Form.Check checked={this.state.choice == \"otherTransfer\"}type=\"radio\" label=\"Another User\" name=\"otherTransfer\" value=\"/TransactionsOther/secret\" />\n            </Form.Group>\n            { this.state.choice == \"selfTransfer\" ?\n            (<Form.Group>\n              <Form.Label>SELECT AN ACCOUNT</Form.Label>\n              <Form.Control as=\"select\" name=\"receiver_account_id\" value={this.state.account} onChange={this.updateAccount}>\n                  {this.getAccounts()}\n              </Form.Control>\n            </Form.Group>) :\n            (<Form.Group>\n              <Form.Label>TO:</Form.Label>\n              <Form.Control type=\"email\" name=\"email\"  value={this.state.email} onChange={this.updateEmail}/>\n            </Form.Group>)}\n            <Form.Group>\n              <Form.Label>Amount:</Form.Label>\n              <InputGroup>\n              <InputGroup.Prepend>\n              <InputGroup.Text id=\"inputGroupPrepend\">$</InputGroup.Text>\n              </InputGroup.Prepend>\n                <Form.Control type=\"text\" name=\"amount\" value={this.state.amount} onChange={this.updateAmount}/>\n              </InputGroup>\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n        <Button variant=\"outline-danger\" onClick={this.props.parent.openModal} >CANCEL</Button>\n      <Button variant=\"outline-dark\"  form=\"transerForm\" type=\"submit\" value=\"submit\" >SEND</Button>\n        </Modal.Footer>\n\n      </Modal>\n    )\n  }\n}\n\n// '/Transactions/:api_key'  //  << Tranfers between your own accounts. Body args are amount, sender_account_id, receiver_account_id\n// '/Transactions/:email/:api_key' //  <<Transfer to a different user. Body args are amount, sender_account_id, email\nexport default TransferModal\n"]},"metadata":{},"sourceType":"module"}